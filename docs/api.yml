openapi: 3.0.0
servers:
  - url: 'https://accounts.stq.cloud/v1'
  - url: 'http://accounts.stq.cloud/v1'
info:
  description: Accounts, balances, transactions, etc.
  version: "1.0.0"
  title: Accounts core
  contact:
    email: a.karasev@storiqa.com
tags:
  - name: users
    description: Methods for working with users
  - name: accounts
    description: Managements of accounts
  - name: balances
    description: Methods for working with account balances
  - name: transactions
    description: Managements of transactions
paths:
  /accounts/{accountId}/balances:
    get:
      summary: Returns balance of account
      description: You need to be authenticated to use this method.
      security:
        - Bearer: []
      tags:
        - balances
      parameters:
        - $ref: '#/components/parameters/accountIdParam'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
  /users/{userId}/balances:
    get:
      summary: Returns total balances of a user
      description: You need to be authenticated to use this method.
      security:
        - Bearer: []
      tags:
        - balances
      parameters:
        - $ref: '#/components/parameters/userIdParam'
        - $ref: '#/components/parameters/accountIdParam'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Balance'
  /users/me:
    get:
      summary: Returns current user
      description: You need to be authenticated to use this method.
      security:
        - Bearer: []
      tags:
        - users
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/Internal'

  /users/{userId}/accounts:
    get:
      summary: Returns list of accounts for a user.
      description: You need to be an admin or a user with `userId` to get this list.
      security:
        - Bearer: []
      tags:
        - accounts
      parameters:
        - $ref: '#/components/parameters/userIdParam'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/Internal'
    post:
      summary: >-
        Creates account for a user
      description: Only aithenticated user is allowed to
        create an account
      security:
        - Bearer: []
      tags:
        - accounts
      parameters:
        - $ref: '#/components/parameters/userIdParam'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/Internal'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreateInput'
  /accounts/{accountId}:
    get:
      summary: Returns account by id.
      description: You need to be owner of account to get this.
      security:
        - Bearer: []
      tags:
        - accounts
      parameters:
        - $ref: '#/components/parameters/accountIdParam'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/Internal'

    put:
      summary: Updates account 
      description: Only user, owning the account is allowed to update an account
      security:
        - Bearer: []
      tags:
        - accounts
      parameters:
        - $ref: '#/components/parameters/accountIdParam'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/Internal'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdateInput'
    delete:
      summary: Deletes an account
      description: Account will be deactivated, rather than deleted. Only user owning the account is allowed to delete an account
      security:
        - Bearer: []
      tags:
        - accounts
      parameters:
        - $ref: '#/components/parameters/accountIdParam'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/Internal'
          
  '/users/{userId}/transactions':
    get:
      summary: Lists all transactions of a user
      description: You need to be an admin or a user with `userId` to get this list.
      security:
        - Bearer: []
      tags:
        - transactions
      parameters:
        - $ref: '#/components/parameters/userIdParam'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/Internal'
  '/users/{userId}/accounts/{accountId}/transactions':
    get:
      summary: Lists all transactions of a user's account
      description: You need to be an admin or a user with `userId` to get this list.
      security:
        - Bearer: []
      tags:
        - transactions
      parameters:
        - $ref: '#/components/parameters/userIdParam'
        - $ref: '#/components/parameters/accountIdParam'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/Internal'
  '/transactions/{transactionId}':
    get:
      summary: Get transaction by id
      description: Only users with `userId` are allowed to get a transaction.
      security:
        - Bearer: []
      tags:
        - transactions
      parameters:
        - $ref: '#/components/parameters/transactionIdParam'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/Internal'
  '/transactions':
    post:
      summary: Create a transactions beetween accounts inside payments system
      description: Only users with `userId` are allowed to create a transaction. The transaction will be executed immediately.
      security:
        - Bearer: []
      tags:
        - transactions
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        422:
          $ref: '#/components/responses/UnprocessableEntity'
        500:
          $ref: '#/components/responses/Internal'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreateInput'
  

components:
  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            description: Error that comes with 404 status
            properties:
              code:
                type: string
                example: 404

              description:
                type: string
                example: Not found

    BadRequest:
      description: Most likely malformed json (this includes violating schema in terms of required fields, but not validations)
      content:
        application/json:
          schema:
            type: object
            description: Error that comes with 400 status
            properties:

              description:
                type: string
                example: Bad request
    Unauthorized:
      description: Unauthorized to perform action
      content:
        application/json:
          schema:
            type: object
            description: Error that comes with 401 status
            properties:

              description:
                type: string
                example: Unauthorized
    UnprocessableEntity:
      description: Json object matched schema, but didn't pass validations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrors'
    Internal:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            description: Error that comes with 500 status
            properties:
              description:
                type: string
                example: Internal server error

  schemas:
    ValidationErrors:
      type: array
      items:
        type: object
        properties:
          email:
            type: array
            description: Field name
            items:
              type: object
              properties:
                code:
                  type: string
                  description: Validator name
                  example: email
                message:
                  type: string
                  description: Validation message
                  example: Invalid email format
          password:
            type: array
            description: Field name
            items:
              type: object
              properties:
                code:
                  type: string
                  description: Validator name
                  example: length
                message:
                  type: string
                  description: Validation message
                  example: Length must be greater than 8
            example:
              -
                code: length
                message: Length must be greater than 8
              -
                code: length
                message: Length must be less than 16
    UserId:
      type: string
      description: Id of a User in our system
      example: jghkdfgdjfgkdf7gd
    AccountId:
      type: string
      description: Id of Account in our system
      example: jghkdfgdjfgkdf7gd
    Value:
      type: integer
      format: uint256
      description: Monetary value - either fiat or blockchain
      example: 185000000000000000000
      
    Transaction:
      type: object
      required:
        - id
        - fromAddress
        - toAddress
        - currency
        - value
        - createdAt
      properties:
        id:
          $ref: '#/components/schemas/Id'
        fromAddress:
          $ref: '#/components/schemas/AccountAddress'
        toAddress:
          $ref: '#/components/schemas/AccountAddress'
        currency:
          $ref: '#/components/schemas/Currency'
        value:
          $ref: '#/components/schemas/Value'
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        holdUntil:
          $ref: '#/components/schemas/Timestamp'
          
    TransactionCreateInput:
      type: object
      required:
        - userId
        - from
        - to
        - toType
        - currency
        - value
        - fee
      properties:
        userId:
          $ref: '#/components/schemas/UserId'
        from:
          $ref: '#/components/schemas/AccountId'
        to:
          description: >
            Generally you make a transaction using blockchain address.
            However, when working with obfuscated accounts you get back
            only account id in our system (we need that to hide blockchain
            address so that a user couldn't find it by phone)
          oneOf:
            - $ref: '#/components/schemas/AccountId'
            - $ref: '#/components/schemas/AccountAddress'
          discriminator:
            propertyName: toType
          example:
            jghkdfgdjfgkdf7gd | 0x89595fa59d69d696d9d96
        toType:
          type: string
          enum: [account|address]
        currency:
          $ref: '#/components/schemas/Currency'
        value:
          $ref: '#/components/schemas/Value'
        fee:
          $ref: '#/components/schemas/Value'
          
    AccountAddress:
      type: string
      description: Either blockchain address or fiat account number (depending on currency)
      example: '0x89595fa59d69d696d9d96'
    AccountCreateInput:
      type: object
      required:
        - id
        - currency
        - name
      properties:
        id:
          $ref: '#/components/schemas/Id'
        currency:
          $ref: '#/components/schemas/Currency'
        name:
          type: string
          description: Short name for the account
          example: My main account
    AccountUpdateInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Short name for the account
          example: My main account
    Balance:
      type: object
      required:
        - currency
        - value
      properties:
        currency:
          $ref: '#/components/schemas/Currency'
        value:
          $ref: '#/components/schemas/Value'
    Account:
      type: object
      required:
        - id
        - balance
        - currency
        - userId
        - accountAddress
        - name
      properties:
        id:
          $ref: '#/components/schemas/Id'
        balance:
          $ref: '#/components/schemas/Value'
        currency:
          $ref: '#/components/schemas/Currency'
        userId:
          $ref: '#/components/schemas/UserId'
        accountAddress:
          $ref: '#/components/schemas/AccountAddress'
        name:
          type: string
          description: Short name for the account
          example: My main account
    Currency:
      type: string
      description: >-
        ISO 4217 alphabetic code for fiat currencies in CAPS
        [source](https://www.currency-iso.org/en/home/tables/table-a1.html). Or
        Coinmarketcap symbol in CAPS [source](https://coinmarketcap.com/)
      example: ETH
    Id:
      type: string
      example: jghkdfgdjfgkdf7gd
    User:
      type: object
      required:
        - email
        - phone
        - firstName
        - lastName
        - companyName
      properties:
        id:
          $ref: '#/components/schemas/Id'
        email:
          type: string
          example: a.karasev@storiqa.com
        phone:
          type: string
          example: '79034442211'
        firstName:
          type: string
          example: Alexey
        lastName:
          type: string
          example: Karasev
        companyName:
          type: string
          example: Storiqa
    Timestamp:
      type: string
      format: date-time
      example: '2017-07-21T17:32:28Z'
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
  parameters:
    transactionIdParam:
      name: transactionId
      in: path
      description: ID of transaction
      required: true
      schema:
        $ref: '#/components/schemas/Id'
  
    userIdParam:
      name: userId
      in: path
      description: ID of user
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    accountIdParam:
      name: accountId
      in: path
      description: ID of account
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
      description: The number of items to skip before starting to collect the result set.
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20